% Parameters (fixed)
alpha = 0.05;    % Influence of mood and messaging on behavioral intention (B)
kappa = 0.15;    % Decay rate of recall (R)
lambda = 0.1;    % Decay rate of persuasiveness (P)
gamma = 0.2;     % Influence of persuasiveness on behavioral intention (B)
eta = 0.3;       % Effect of mood on persuasiveness (P)
tau = 10;        % Time constant for decay of behavioral intention (B)

% Initial conditions
P0 = 0.99999;        % Initial persuasiveness (P)
R0 = 0.99999;        % Initial recall (R)
B0 = 0.99999;        % Initial behavioral intention (B)

% Time span for the simulation
tspan = [0 30];  % Simulate from t = 0 to t = 100

% Range of values for m and mu to explore
m_values = linspace(-2, 2, 100);  % Range of messaging strength (m)
mu_values = linspace(0.1, 1, 100);  % Range of mood (mu)

% Allocate matrices to store final values of B or efficacy
final_B = zeros(length(m_values), length(mu_values));
final_efficacy = zeros(length(m_values), length(mu_values));

% Loop over m and mu to simulate and store final results
for i = 1:length(m_values)
    for j = 1:length(mu_values)
        
        % Current values of m and mu
        m = m_values(i);
        mu = mu_values(j);
        
        % Define the system of ODEs with current m and mu
        ode_system = @(t, y) [
            -lambda * y(1) + eta * mu * m;  % dP/dt (persuasiveness)
            -kappa * y(2) + alpha * mu * m^2; % dR/dt (recall)
            -alpha * exp(-t / tau) * y(3) + gamma * mu * m^2 * y(1);  % dB/dt (behavioral intention)
        ];

        % Initial state vector [P0; R0; B0]
        initial_conditions = [P0; R0; B0];

        % Solve the system of ODEs using ode45
        [t, solution] = ode45(ode_system, tspan, initial_conditions);

        % Extract the solutions for P, R, and B
        P = solution(:, 1);
        R = solution(:, 2);
        B = solution(:, 3);

        % Compute efficacy (sqrt(P^2 + R^2 + B^2))
        efficacy = sqrt(P.^2 + R.^2 + B.^2);

        % Store the final value of B or efficacy
        final_B(i, j) = B(end);  % Store final behavioral intention
        final_efficacy(i, j) = efficacy(end);  % Store final efficacy
    end
end

% Plot the bifurcation diagrams for final behavioral intention (B) and efficacy
figure;

subplot(1, 2, 1);
imagesc(mu_values, m_values, final_B');
colorbar;
xlabel('Mood (\mu)');
ylabel('Messaging Strength (m)');
title('Bifurcation Diagram: Behavioral Intention (B)');
axis xy;

subplot(1, 2, 2);
imagesc(mu_values, m_values, final_efficacy');
colorbar;
xlabel('Mood (\mu)');
ylabel('Messaging Strength (m)');
title('Bifurcation Diagram: Efficacy (\varepsilon)');
axis xy;

% Display the final efficacy value at the end of the simulation
disp(['Final efficacy at t = ', num2str(t(end)), ' is ', num2str(final_efficacy(end))]);
